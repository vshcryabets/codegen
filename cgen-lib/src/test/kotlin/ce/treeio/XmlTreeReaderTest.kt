package ce.treeio

import ce.defs.DataType
import ce.defs.NotDefined
import generators.obj.input.ConstantDesc
import generators.obj.input.ConstantsBlock
import generators.obj.input.DataField
import generators.obj.input.NamespaceImpl
import generators.obj.out.CommentsBlock
import generators.obj.out.FileDataImpl
import generators.obj.out.ImportsBlock
import generators.obj.out.NamespaceDeclaration
import generators.obj.out.OutputTree
import generators.obj.out.RegionImpl
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Assertions.assertFalse
import org.junit.jupiter.api.Assertions.assertTrue
import org.junit.jupiter.api.Test

class XmlTreeReaderTest {
    val reader = XmlTreeReader()

    @Test
    fun loadFromString() {
        val result = reader.loadFromString("""
            <Namespace name="com.goldman.xml">
                    <ConstantsBlock defaultType="int32" name="ModeTypeXml">
                        <CommentsBlock>
                            <CommentLeaf name="File mode types"/>
                        </CommentsBlock>
                        <ConstantDesc name="OREAD"/>
                        <ConstantDesc name="OWRITE"/>
                        <ConstantDesc name="ORDWR"/>
                        <ConstantDesc name="OEXEC"/>
                        <ConstantDesc name="OTRUNC" value="100"/>
                    </ConstantsBlock>
            </Namespace>
        """.trimIndent())
        assertTrue(result is NamespaceImpl)
        val rootNs =result as NamespaceImpl
        assertEquals("com", rootNs.name)
        assertEquals(1, rootNs.subs.size)

        val lastNs = rootNs.getNamespace("goldman.xml")
        val constantsBlock = lastNs.subs.first() as ConstantsBlock
        assertEquals(6, constantsBlock.subs.size)
        val constant1 = constantsBlock.subs[1] as ConstantDesc
        assertEquals(DataType.int32, constant1.getType())
        assertEquals(NotDefined, constant1.getValue().simple)
        assertEquals(1, constant1.subs.size)
        val constant5 = constantsBlock.subs[5] as ConstantDesc
        assertEquals(100, constant5.getValue().simple)
        assertEquals(2, constant5.subs.size)
    }

    @Test
    fun loadStaticField() {
        val result = reader.loadFromString("""
            <DataField name="A" value="100">
                <TypeLeaf name="int32"/>
            </DataField>
        """.trimIndent())
        assertTrue(result is DataField)
        val dataField1 = result as DataField
        assertFalse(dataField1.static)

        val result2 = reader.loadFromString("""
            <DataField name="B" value="100" static="true">
                <TypeLeaf name="int32"/>
            </DataField>
        """.trimIndent())
        assertTrue(result2 is DataField)
        val dataField2 = result2 as DataField
        assertTrue(dataField2.static)
    }

    @Test
    fun testLoadOutputTree() {
        val projectOutput = reader.loadFromString(
            """
            <OutputTree name="/" target="kotlin">
                <FileDataImpl name="MetaEngine">
                    <NamespaceDeclaration>
                        <Keyword name="package"/>
                        <VariableName name="ce.defs"/>
                    </NamespaceDeclaration>
                    <ImportsBlock/>
                    <CommentsBlock>
                        <CommentLeaf name="Warning! This file is autogenerated."/>
                        <CommentLeaf name="Source file ../../../../../../cgen/enums.kts"/>
                    </CommentsBlock>
                    <Region name="MetaEngine">
                        <OutBlock name="enum class MetaEngine">
                            <EnumNode name="KTS"/>
                            <EnumNode name="GROOVY"/>
                        </OutBlock>
                    </Region>
                </FileDataImpl>
            </OutputTree>
        """.trimIndent()
        ) as OutputTree
        Assertions.assertEquals(1, projectOutput.subs.size)
        assertEquals(FileDataImpl::class.java, projectOutput.subs[0].javaClass)
        val file = projectOutput.subs[0] as FileDataImpl
        Assertions.assertEquals(4, file.subs.size)
        assertEquals(NamespaceDeclaration::class.java, file.subs[0].javaClass)
        assertEquals(ImportsBlock::class.java, file.subs[1].javaClass)
        assertEquals(CommentsBlock::class.java, file.subs[2].javaClass)
        assertEquals(RegionImpl::class.java, file.subs[3].javaClass)
    }
}