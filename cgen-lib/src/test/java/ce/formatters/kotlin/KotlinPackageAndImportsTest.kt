package ce.formatters.kotlin

import ce.basetest.KotlinBaseTest
import generators.obj.out.FileDataImpl
import generators.obj.out.Keyword
import generators.obj.out.NamespaceDeclaration
import generators.obj.out.OutputTree
import generators.obj.out.Space
import generators.obj.out.VariableName
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test

class KotlinPackageAndImportsTest: KotlinBaseTest() {

    @Test
    fun testKotlinNamespaceDeclarationPattern() {
        val projectOutput = xmlReader.loadFromString("""
            <?xml version="1.0" encoding="UTF-8" standalone="no"?>
            <OutputTree name="/" target="kotlin">
                <FileDataImpl name="/home/mrco/Documents/git/codegen/cgen-lib/cgen/./../src/main/kotlin/ce/defs/MetaEngine">
                    <NamespaceDeclaration>
                        <Keyword name="package"/>
                        <VariableName name="ce.defs"/>
                    </NamespaceDeclaration>
                    <ImportsBlock/>
                    <CommentsBlock>
                        <CommentLeaf name="Warning! This file is autogenerated."/>
                        <CommentLeaf name="Source file ../../../../../../cgen/enums.kts"/>
                    </CommentsBlock>
                    <Region name="MetaEngine">
                        <OutBlock name="enum class MetaEngine">
                            <EnumNode name="KTS"/>
                            <EnumNode name="GROOVY"/>
                        </OutBlock>
                    </Region>
                </FileDataImpl>               
            </OutputTree>
        """.trimIndent()) as OutputTree

        val formatted = prepareCodeStyleTreeUseCase.prepareCodeStyleTree(projectOutput)
        // expected result
        // <FileData>
        //     <NamespaceDeclaration>
        //         <Keyword name="package"/>
        //         <Space>
        //         <VariableName name="com.goldman.xml"/>
        //         <NewLine/>
        //         <NewLine/>
        //     </NamespaceDeclaration>
        //     <region>
        // ...
        Assertions.assertEquals(1, formatted.subs.size)
        Assertions.assertEquals(FileDataImpl::class.java, formatted.subs[0]::class.java)
        val file = formatted.subs[0] as FileDataImpl
        Assertions.assertEquals(4, file.subs.size)
        Assertions.assertEquals(NamespaceDeclaration::class.java, file.subs[0]::class.java)
        val namespaceDeclaration = file.subs[0] as NamespaceDeclaration
        Assertions.assertEquals(5, namespaceDeclaration.subs.size)
        Assertions.assertEquals(Keyword::class.java, namespaceDeclaration.subs[0]::class.java)
        Assertions.assertEquals("package", (namespaceDeclaration.subs[0] as Keyword).name)
        Assertions.assertEquals(Space::class.java, namespaceDeclaration.subs[1]::class.java)
        Assertions.assertEquals(VariableName::class.java, namespaceDeclaration.subs[2]::class.java)
    }
}