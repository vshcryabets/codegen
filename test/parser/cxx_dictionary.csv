0,"#"
1,"include"
2,"<"
3,"iostream"
4,">"
5,"int"
6,"main"
7,"("
8,")"
9,"{"
10,"pragma"
11,"once"
12,"const"
13,"int32_t"
14,"="
15,"alignas"
16,"alignof"
17,"and"
18,"and_eq"
19,"asm"
20,"atomic_cancel"
21,"atomic_commit"
22,"atomic_noexcept"
23,"auto"
24,"bitand"
25,"bitor"
26,"bool"
27,"break"
28,"case"
29,"catch"
30,"char"
31,"char8_t"
32,"char16_t"
33,"char32_t"
34,"class"
35,"compl"
36,"concept"
37,"consteval"
38,"constexpr"
39,"constinit"
40,"const_cast"
41,"continue"
42,"co_await"
43,"co_return"
44,"co_yield"
45,"decltype"
46,"default"
47,"delete"
48,"do"
49,"double"
50,"dynamic_cast"
51,"else"
52,"enum"
53,"explicit"
54,"export"
55,"extern"
56,"false"
57,"float"
58,"for"
59,"friend"
60,"goto"
61,"if"
62,"inline"
63,"long"
64,"mutable"
65,"namespace"
66,"new"
67,"noexcept"
68,"not"
69,"not_eq"
70,"nullptr"
71,"operator"
72,"or"
73,"or_eq"
74,"private"
75,"protected"
76,"public"
77,"reflexpr"
78,"register"
79,"reinterpret_cast"
80,"requires"
81,"return"
82,"short"
83,"signed"
84,"sizeof"
85,"static"
86,"static_assert"
87,"static_cast"
88,"struct"
89,"switch"
90,"synchronized"
91,"template"
92,"this"
93,"thread_local"
94,"throw"
95,"true"
96,"try"
97,"typedef"
98,"typeid"
99,"typename"
100,"union"
101,"unsigned"
102,"using"
103,"virtual"
104,"void"
105,"volatile"
106,"wchar_t"
107,"while"
108,"xor"
109,"xor_eq"
