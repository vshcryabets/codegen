package generators.kotlin

import ce.settings.CodeStyle
import ce.settings.Project
import generators.obj.Generator
import generators.obj.input.ClassDescription
import generators.obj.input.ConstantsBlock
import generators.obj.input.ConstantsEnum

class ConstantsBlockGenerator(
    style: CodeStyle,
    private val project: Project
) : Generator(style) {

    override fun build(desc: ClassDescription): ClassData {
        if (!(desc is ConstantsBlock))
            throw java.lang.IllegalArgumentException("Only ConstantsEnum supported")
        val result = ClassData().apply {
            namespace = desc.namespace
            fileName = "${desc.name}.kt"
            headers.append("package $namespace\n");

            if (project.addAutogeneratedCommentNotification) {
                desc.classComment.append("\nWarning! This file is autogenerated.\n")
            }

            if (desc.classComment.isNotEmpty()) {
                classDefinition.append("/**\n")
                desc.classComment.lines().forEach { line ->
                    classDefinition.append("* $line\n")
                }
                classDefinition.append("*/\n")
            }
            classDefinition.append("object ${desc.name} {\n");
            var previous: Any? = null
            desc.constants.forEach {
                if (it.value == null && previous != null) {
                    it.value = previous!! as Int + 1;
                }

                if (it.value != null) {
                    previous = it.value
                }

                classDefinition.append(tabSpace);
                classDefinition.append("const val ");
                classDefinition.append(it.name);
                classDefinition.append(" : ${Types.typeTo(this, it.type)}")
                classDefinition.append(" = ${Types.toValue(this, it.type, it.value)}")
                classDefinition.append('\n')
            }
            classDefinition.append("}\n");
        }
        return result
    }
}