package generators.obj

import ce.defs.Target
import ce.settings.Project
import generators.obj.input.Block
import generators.obj.input.ConstantsBlock
import generators.obj.input.ConstantsEnum
import generators.obj.out.ClassData
import generators.obj.out.FileData
import generators.obj.out.ProjectOutput

abstract class MetaGenerator<T : ClassData>(
    val target: Target = Target.Other,
    val enum: Generator<*, T>,
    val constantsBlock: Generator<*, T>,
    private val writter: Writter<T>,
    private val project: Project
) {

    abstract fun getBlockFilePath(block: Block) : String

    open fun processProject(blocks: List<Block>): ProjectOutput {
        val result = ProjectOutput()
        val files = result.files
        val outs = mutableListOf<T>()
        val blockFileData = mutableMapOf<Block, FileData>()

        // prepare output files
        blocks.forEach {
            val outputFile = getBlockFilePath(it)
            val fileData = if (files.contains(outputFile)) {
                files[outputFile]!!
            } else {
                val data = FileData()
                files.put(outputFile, data)
                data
            }
            blockFileData.put(it, fileData)
        }

//        blocks.forEach {
//            if (it is ConstantsEnum) {
//                val classData = enum.buildBlock(item)
//                outs.add(classData)
//            }
//            if (it is ConstantsBlock) {
//                val classData = constantsBlock.buildBlock(item)
//                outs.add(classData)
//            }
//        }

        outs.forEach{
            //writter.w
        }

        return result
    }

    open fun buildFile(project: ProjectOutput) {

    }

    fun writeItem(item: Block) {
//        if (project.addAutogeneratedCommentNotification) {
//            item.classComment.append("\nWarning! This file is autogenerated.\n")
//        }
//

    }

    fun write(objects: List<Block>) {
        val projectOutput = processProject(objects)
        writter.write(projectOutput)
    }
}