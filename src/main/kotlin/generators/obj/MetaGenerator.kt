package generators.obj

import ce.defs.Target
import ce.settings.Project
import generators.obj.input.Block
import generators.obj.input.ConstantsBlock
import generators.obj.input.ConstantsEnum
import generators.obj.out.ClassData
import generators.obj.out.FileData
import generators.obj.out.ProjectOutput

abstract class MetaGenerator<T : ClassData>(
    val target: Target = Target.Other,
    val enum: Generator<ConstantsEnum, T>,
    val constantsBlock: Generator<ConstantsBlock, T>,
    val fileGenerator : FileGenerator,
    private val writter: Writter<T>,
    private val project: Project
) {

    abstract fun getBlockFilePath(block: Block) : String

    open fun processProject(blocks: List<Block>): ProjectOutput {
        val result = ProjectOutput()
        val files = result.files
        val fileBlockMap = mutableMapOf<FileData, MutableList<Block>>()

        // prepare output files
        blocks.forEach {
            val outputFile = getBlockFilePath(it)
            val fileData = if (files.contains(outputFile)) {
                files[outputFile]!!
            } else {
                val data = fileGenerator.createFile(it.namespace, outputFile)

                if (project.addAutogeneratedCommentNotification) {
                    fileGenerator.appendInitalComment(data, "Warning! This file is autogenerated.")
                }

                files[outputFile] = data
                fileBlockMap[data] = mutableListOf()
                data
            }
            fileBlockMap[fileData]!!.add(it)
        }
        println(fileBlockMap)

        fileBlockMap.forEach {
            val fileData = it.key
            it.value.forEach { block ->
                fileData.outputBlocks[block.name] = when (block) {
                    is ConstantsEnum -> enum.buildBlock(fileData, block)
                    is ConstantsBlock -> constantsBlock.buildBlock(fileData, block)
                    else -> ClassData.emptyClassData
                }
            }
        }

        return result
    }

    open fun buildFile(project: ProjectOutput) {

    }


    fun write(objects: List<Block>) {
        val projectOutput = processProject(objects)
        writter.write(projectOutput)
    }
}